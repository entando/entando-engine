
name: PR-CYCLE

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    branches:
      - develop*

env:
  ENTANDO_OPT_USE_PPL_TAG: "v1.1.2"
  ENTANDO_OPT_FEATURES: "${{ secrets.ENTANDO_OPT_FEATURES }}"
  ENTANDO_OPT_GLOBAL_FEATURES: "${{ secrets.ENTANDO_OPT_GLOBAL_FEATURES }}"
  ENTANDO_OPT_LOG_LEVEL: "${{ secrets.ENTANDO_OPT_LOG_LEVEL }}"
  ENTANDO_OPT_REPO_BOM_URL: "${{ secrets.ENTANDO_OPT_REPO_BOM_URL }}"
  PPL_CONTEXT: ${{ toJson(github) }}
  GIT_USER_NAME: "${{ secrets.GIT_USER_NAME }}"
  GIT_USER_EMAIL: "${{ secrets.GIT_USER_EMAIL }}"
  LOCAL_CLONE_DIR: "local-checkout"
  SNYK_ORG: "entando-ixc"


jobs:
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # PREPARE
  
  prepare:
    runs-on: ubuntu-latest
    outputs:
      SCAN_MATRIX: ${{ steps.START.outputs.SCAN_MATRIX }}
    steps:
      #~
      - name: "PR PIPELINE START"
        id: START
        run: |
          ${{ secrets.ENTANDO_OPT_PPL_INSTALL_CMD }}
          ~/ppl-run \
            .. status-report \
            .. @checkout-branch pr --lcd "$LOCAL_CLONE_DIR" \
            .. @setup-feature-flags "PR_PREFLIGHT_CHECKS" "BOM_CHECK" "BOM" \
            .. @setup-features-list "SCAN_MATRIX" --prefix "MTX-MVN-SCAN-" \
          ;
      - name: "PR preflight checks"
        if: steps.START.outputs.PR_PREFLIGHT_CHECKS != 'false'
        id: pr-preflight-checks
        run: |
          ~/ppl-run pr-preflight-checks --lcd "$LOCAL_CLONE_DIR"

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # FULL-BUILD
  
  full-build:
    needs: [ 'prepare' ]
    runs-on: ubuntu-latest
    steps:
      #~ CHECKOUT
      - name: "CHECKOUT"
        run: |
          ${{ secrets.ENTANDO_OPT_PPL_INSTALL_CMD }}
          ~/ppl-run checkout-branch pr \
            --lcd "$LOCAL_CLONE_DIR" \
            --token "${{ secrets.ENTANDO_BOT_TOKEN }}" \
          ;
          
          # Refines the cache key
          echo "BUILD_CACHE_KEY=$( sha256sum "$LOCAL_CLONE_DIR/pom.xml" --zero | cut -d' ' -f1 )" >> $GITHUB_ENV
      #~ JDK
      - name: "Set up JDK 11"
        uses: actions/setup-java@v1
        with:
          java-version: 11
      #~ MAVEN CACHE
      - name: "Cache Maven packages"
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2
          restore-keys: ${{ runner.os }}-m2
      #~ BUILD CACHE
      - name: "Cache Build Dir"
        id: build-cache
        uses: actions/cache@v2
        with:
          path: "${{ env.LOCAL_CLONE_DIR }}/target/"
          key: ${{ runner.os }}-build-${{ env.BUILD_CACHE_KEY }}
      #~ SONAR CACHE
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      #~ BUILD
      - name: "FULL BUILD"
        env:
          ENTANDO_OPT_SONAR_PROJECT_KEY: "${{ secrets.ENTANDO_OPT_SONAR_PROJECT_KEY }}"
          SONAR_TOKEN: "${{ secrets.SONAR_TOKEN }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          ~/ppl-run \
            .. generic FULL-BUILD --lcd "$LOCAL_CLONE_DIR" \
            .. release tag-snapshot-version --lcd "$LOCAL_CLONE_DIR" \
          ;

  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  # SCANS
  scans:
    needs: [ 'prepare', 'full-build' ]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.SCAN_MATRIX != '' }}
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        scan-type: ${{fromJson(needs.prepare.outputs.SCAN_MATRIX)}}
      
    steps:
      #~ CHECKOUT
      - name: "CHECKOUT"
        run: |
          ${{ secrets.ENTANDO_OPT_PPL_INSTALL_CMD }}
          ~/ppl-run checkout-branch pr --lcd "$LOCAL_CLONE_DIR"
          
          echo "BUILD_CACHE_KEY=$( sha256sum "$LOCAL_CLONE_DIR/pom.xml" --zero | cut -d' ' -f1 )" >> $GITHUB_ENV
      #~ JDK
      - name: "Set up JDK 11"
        uses: actions/setup-java@v1
        with:
          java-version: 11
      #~ MAVEN CACHE
      - name: "Cache Maven packages"
        id: maven-cache
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2
          restore-keys: ${{ runner.os }}-m2
      #~ BUILD CACHE
      - name: "Cache Build Dir"
        id: build-cache
        uses: actions/cache@v2
        with:
          path: "${{ env.LOCAL_CLONE_DIR}}/target/"
          key: ${{ runner.os }}-build-${{ env.BUILD_CACHE_KEY }}
      #~ SCAN
      - name: "Run the Scan"
        run: |
          SCAN_TYPE="${{ matrix.scan-type }}"
          case "$SCAN_TYPE" in
            SCAN-MVN-SONAR)
              export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
              export SONAR_TOKEN="${{ secrets.SONAR_TOKEN }}"
              export ENTANDO_OPT_SONAR_PROJECT_KEY="${{ secrets.ENTANDO_OPT_SONAR_PROJECT_KEY }}"
              ;;
            SCAN-MVN-SNYK)
              export SNYK_TOKEN="${{ secrets.SNYK_TOKEN }}"
            ;;
          esac
          ~/ppl-run generic "$SCAN_TYPE" mvn --id "$SCAN_TYPE" --lcd "$LOCAL_CLONE_DIR"
